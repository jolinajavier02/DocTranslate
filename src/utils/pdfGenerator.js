import jsPDF from 'jspdf'

/**
 * Generate and download a PDF with original and translated text
 * @param {Object} options - PDF generation options
 * @param {string} options.originalText - Original document text
 * @param {string} options.translatedText - Translated document text
 * @param {string} options.language - Target language
 * @param {string} options.documentType - Type of document
 * @param {string} options.fileName - Original file name
 * @returns {Promise<void>}
 */
export const generatePDF = async ({
  originalText,
  translatedText,
  language,
  documentType,
  fileName
}) => {
  try {
    // Create new PDF document
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    })

    // PDF dimensions
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    const margin = 20
    const contentWidth = pageWidth - (margin * 2)
    const lineHeight = 7
    const maxLinesPerPage = Math.floor((pageHeight - margin * 2) / lineHeight) - 10

    // Helper function to add text with word wrapping
    const addWrappedText = (text, x, y, maxWidth, fontSize = 10) => {
      pdf.setFontSize(fontSize)
      const lines = pdf.splitTextToSize(text, maxWidth)
      let currentY = y
      
      lines.forEach((line, index) => {
        if (currentY > pageHeight - margin) {
          pdf.addPage()
          currentY = margin
        }
        pdf.text(line, x, currentY)
        currentY += lineHeight
      })
      
      return currentY
    }

    // Helper function to get language name
    const getLanguageName = (code) => {
      const languages = {
        en: 'English',
        es: 'Spanish',
        fr: 'French',
        de: 'German',
        it: 'Italian',
        pt: 'Portuguese',
        ru: 'Russian',
        ja: 'Japanese',
        ko: 'Korean',
        zh: 'Chinese',
        ar: 'Arabic',
        hi: 'Hindi',
        tl: 'Filipino'
      }
      return languages[code] || code.toUpperCase()
    }

    // Add header
    pdf.setFontSize(20)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Document Translation', margin, margin + 10)
    
    // Add document info
    pdf.setFontSize(12)
    pdf.setFont('helvetica', 'normal')
    let currentY = margin + 25
    
    pdf.text(`Original Document: ${fileName}`, margin, currentY)
    currentY += lineHeight
    pdf.text(`Document Type: ${documentType.charAt(0).toUpperCase() + documentType.slice(1)}`, margin, currentY)
    currentY += lineHeight
    pdf.text(`Translated to: ${getLanguageName(language)}`, margin, currentY)
    currentY += lineHeight
    pdf.text(`Generated: ${new Date().toLocaleDateString()}`, margin, currentY)
    currentY += lineHeight * 2

    // Add separator line
    pdf.setDrawColor(200, 200, 200)
    pdf.line(margin, currentY, pageWidth - margin, currentY)
    currentY += lineHeight

    // Add original text section
    pdf.setFontSize(14)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Original Text', margin, currentY)
    currentY += lineHeight
    
    pdf.setDrawColor(100, 100, 100)
    pdf.line(margin, currentY, pageWidth - margin, currentY)
    currentY += lineHeight

    // Add original text content
    currentY = addWrappedText(originalText, margin, currentY, contentWidth, 10)
    currentY += lineHeight * 2

    // Check if we need a new page
    if (currentY > pageHeight - margin - 50) {
      pdf.addPage()
      currentY = margin
    }

    // Add translated text section
    pdf.setFontSize(14)
    pdf.setFont('helvetica', 'bold')
    pdf.text(`Translated Text (${getLanguageName(language)})`, margin, currentY)
    currentY += lineHeight
    
    pdf.setDrawColor(100, 100, 100)
    pdf.line(margin, currentY, pageWidth - margin, currentY)
    currentY += lineHeight

    // Add translated text content
    currentY = addWrappedText(translatedText, margin, currentY, contentWidth, 10)

    // Add footer to all pages
    const totalPages = pdf.internal.getNumberOfPages()
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i)
      pdf.setFontSize(8)
      pdf.setFont('helvetica', 'normal')
      pdf.setTextColor(128, 128, 128)
      
      // Footer text
      const footerText = 'Generated by DocTranslate - Professional Document Translation'
      const footerWidth = pdf.getTextWidth(footerText)
      pdf.text(footerText, (pageWidth - footerWidth) / 2, pageHeight - 10)
      
      // Page number
      const pageText = `Page ${i} of ${totalPages}`
      pdf.text(pageText, pageWidth - margin - pdf.getTextWidth(pageText), pageHeight - 10)
    }

    // Generate filename
    const timestamp = new Date().toISOString().slice(0, 10)
    const cleanFileName = fileName.replace(/\.[^/.]+$/, '') // Remove extension
    const pdfFileName = `${cleanFileName}_translated_${language}_${timestamp}.pdf`

    // Save the PDF
    pdf.save(pdfFileName)
    
    return pdfFileName
  } catch (error) {
    console.error('PDF generation error:', error)
    throw new Error(`Failed to generate PDF: ${error.message}`)
  }
}

/**
 * Generate a comparison PDF with side-by-side layout
 * @param {Object} options - PDF generation options
 * @returns {Promise<string>} - Generated filename
 */
export const generateComparisonPDF = async ({
  originalText,
  translatedText,
  language,
  documentType,
  fileName
}) => {
  try {
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4'
    })

    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    const margin = 15
    const columnWidth = (pageWidth - margin * 3) / 2
    const lineHeight = 6

    // Helper function for wrapped text in columns
    const addColumnText = (text, x, y, maxWidth, fontSize = 9) => {
      pdf.setFontSize(fontSize)
      const lines = pdf.splitTextToSize(text, maxWidth)
      let currentY = y
      
      lines.forEach((line) => {
        if (currentY > pageHeight - margin) {
          pdf.addPage()
          currentY = margin + 30 // Account for headers
        }
        pdf.text(line, x, currentY)
        currentY += lineHeight
      })
      
      return currentY
    }

    const getLanguageName = (code) => {
      const languages = {
        en: 'English', es: 'Spanish', fr: 'French', de: 'German',
        it: 'Italian', pt: 'Portuguese', ru: 'Russian', ja: 'Japanese',
        ko: 'Korean', zh: 'Chinese', ar: 'Arabic', hi: 'Hindi', tl: 'Filipino'
      }
      return languages[code] || code.toUpperCase()
    }

    // Add header
    pdf.setFontSize(16)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Document Translation Comparison', margin, margin + 8)
    
    pdf.setFontSize(10)
    pdf.setFont('helvetica', 'normal')
    pdf.text(`${fileName} | ${documentType} | ${new Date().toLocaleDateString()}`, margin, margin + 16)

    // Column headers
    const headerY = margin + 25
    pdf.setFontSize(12)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Original Text', margin, headerY)
    pdf.text(`Translated Text (${getLanguageName(language)})`, margin * 2 + columnWidth, headerY)

    // Column separators
    pdf.setDrawColor(200, 200, 200)
    pdf.line(margin, headerY + 3, margin + columnWidth, headerY + 3)
    pdf.line(margin * 2 + columnWidth, headerY + 3, pageWidth - margin, headerY + 3)
    
    // Vertical separator
    pdf.line(margin + columnWidth + margin/2, headerY - 5, margin + columnWidth + margin/2, pageHeight - margin)

    // Add content
    const contentY = headerY + 8
    addColumnText(originalText, margin, contentY, columnWidth, 9)
    addColumnText(translatedText, margin * 2 + columnWidth, contentY, columnWidth, 9)

    // Generate filename
    const timestamp = new Date().toISOString().slice(0, 10)
    const cleanFileName = fileName.replace(/\.[^/.]+$/, '')
    const pdfFileName = `${cleanFileName}_comparison_${language}_${timestamp}.pdf`

    pdf.save(pdfFileName)
    return pdfFileName
  } catch (error) {
    console.error('Comparison PDF generation error:', error)
    throw new Error(`Failed to generate comparison PDF: ${error.message}`)
  }
}

/**
 * Generate a simple text-only PDF
 * @param {string} text - Text content
 * @param {string} title - PDF title
 * @param {string} filename - Output filename
 * @returns {Promise<string>} - Generated filename
 */
export const generateSimplePDF = async (text, title, filename) => {
  try {
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    const margin = 20
    const contentWidth = pageWidth - (margin * 2)

    // Add title
    pdf.setFontSize(16)
    pdf.setFont('helvetica', 'bold')
    pdf.text(title, margin, margin + 10)

    // Add content
    pdf.setFontSize(10)
    pdf.setFont('helvetica', 'normal')
    const lines = pdf.splitTextToSize(text, contentWidth)
    
    let currentY = margin + 25
    const lineHeight = 7
    const pageHeight = pdf.internal.pageSize.getHeight()

    lines.forEach((line) => {
      if (currentY > pageHeight - margin) {
        pdf.addPage()
        currentY = margin
      }
      pdf.text(line, margin, currentY)
      currentY += lineHeight
    })

    const pdfFileName = `${filename}.pdf`
    pdf.save(pdfFileName)
    return pdfFileName
  } catch (error) {
    console.error('Simple PDF generation error:', error)
    throw new Error(`Failed to generate PDF: ${error.message}`)
  }
}